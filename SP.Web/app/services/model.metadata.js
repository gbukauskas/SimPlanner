"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var angular_1 = require("angular");
var serviceId = 'model.metadata';
angular_1.default.module('app').factory(serviceId, ['breeze', metadata]);
function metadata(breeze) {
    var keyGen = breeze.AutoGeneratedKeyType.Identity;
    var namespace = 'SM.Model';
    var helper = new breeze.config.MetadataHelper(namespace, keyGen);
    var store;
    var addType = function (type) { helper.addTypeToStore(store, type); };
    var DT = breeze.DataType;
    var BOOL = DT.Boolean;
    var DATE = DT.DateTime;
    var ID = DT.Int32;
    return {
        fillMetadataStore: fillMetadataStore
    };
    function fillMetadataStore(metadataStore) {
        store = metadataStore;
        addPerson();
        addSession();
        addRoom();
        addTimeSlot();
        addTrack();
    }
    function addPerson() {
        addType({
            name: 'Person',
            dataProperties: {
                id: { type: ID },
                firstName: { max: 50, nullOk: false },
                lastName: { max: 50, nullOk: false },
                email: { max: 400 },
                blog: { max: 400 },
                twitter: { max: 400 },
                gender: { max: 1 },
                imageSource: { max: 400 },
                isPartial: { type: BOOL, nullOk: false, isUnmapped: true },
                isSpeaker: { type: BOOL, nullOk: false, isUnmapped: true }
            },
            navigationProperties: {
                speakerSessions: { type: 'Session', hasMany: true }
            }
        });
    }
    function addSession() {
        addType({
            name: 'Session',
            dataProperties: {
                id: { type: ID },
                title: { max: 50, nullOk: false },
                code: { max: 10 },
                description: { max: 4000 },
                level: { max: 30 },
                tags: { max: 4000 },
                roomId: { type: ID, nullOk: false },
                speakerId: { type: ID, nullOk: false },
                timeSlotId: { type: ID, nullOk: false },
                trackId: { type: ID, nullOk: false },
                isPartial: { type: BOOL, nullOk: false, isUnmapped: true }
            },
            navigationProperties: {
                room: 'Room',
                speaker: 'Person',
                timeSlot: 'TimeSlot',
                track: 'Track'
            }
        });
    }
    function addRoom() {
        addType({
            name: 'Room',
            dataProperties: {
                id: { type: ID },
                name: { max: 50, nullOk: false }
            }
        });
    }
    function addTimeSlot() {
        addType({
            name: 'TimeSlot',
            dataProperties: {
                id: { type: ID },
                start: { type: DATE, nullOk: false },
                isSessionSlot: { type: BOOL, nullOk: false },
                duration: { type: ID, nullOk: false }
            }
        });
    }
    function addTrack() {
        addType({
            name: 'Track',
            dataProperties: {
                id: { type: ID },
                name: { max: 50, nullOk: false }
            }
        });
    }
}
//# sourceMappingURL=model.metadata.js.map